name: Build Chrome Extension ZIP

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.12.0"

      # Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Cache dependencies
      - name: Cache pnpm Store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies with --prefer-frozen-lockfile
      - name: Install Dependencies
        run: pnpm install --prefer-frozen-lockfile

      # Load environment variables from root .env
      - name: Load Root .env
        run: |
          if [ -f .env ]; then
            echo "Loading root .env file..."
            cat .env | grep -v '^#' >> $GITHUB_ENV
          fi

      # Load environment variables from ./packages/wxt/.env
      - name: Load ./packages/wxt/.env
        run: |
          if [ -f ./packages/wxt/.env ]; then
            echo "Loading ./packages/wxt/.env file..."
            cat ./packages/wxt/.env | grep -v '^#' >> $GITHUB_ENV
          fi

      # Run the build command from ./packages/wxt/
      - name: Build ZIP
        working-directory: ./packages/wxt
        run: pnpm wxt zip

      # Debugging: Check if ZIP file is generated
      - name: Check Output Directory
        run: ls -l ./packages/wxt/.output || echo "No files found in the output directory"

      # Move the ZIP file to the root directory
      - name: Move ZIP to Root
        run: |
          for file in ./packages/wxt/.output/*.zip; do
            mv "$file" ./chrome-extension.zip && echo "Moved $file to ./chrome-extension.zip";
          done || echo "No ZIP file found to move"

      # Debugging: List files in the root directory
      - name: Check Root Directory Before Upload
        run: ls -l ./ || echo "No files found in the root directory"

      # Upload the ZIP file as a GitHub Release Artifact
      - name: Upload ZIP as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension-zip
          path: ./chrome-extension.zip

      # Get the version number
      - name: Get Version
        id: get-version
        run: |
          MAJOR=0
          MINOR=0
          PATCH=$(printf "%03d" $((github.run_number)))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create GitHub Release
        id: create-release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Chrome Extension Release ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false

      # Upload ZIP to Release
      - name: Upload ZIP to Release
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./chrome-extension.zip
          asset_name: chrome-extension.zip
          asset_content_type: application/zip
